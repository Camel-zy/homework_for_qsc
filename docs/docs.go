// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/event/interview/all/{eid}": {
            "get": {
                "description": "Get brief information of all interviews in a specific event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interview"
                ],
                "summary": "Get all interviews in event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Brief"
                            }
                        }
                    }
                }
            }
        },
        "/event/interview/{eid}{iid}": {
            "get": {
                "description": "Get information of an interview in a specific event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interview"
                ],
                "summary": "Get interview in event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Interview ID",
                        "name": "iid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.InterviewApi"
                        }
                    }
                }
            }
        },
        "/event/{eid}": {
            "get": {
                "description": "Get information of an event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EventApi"
                        }
                    }
                }
            }
        },
        "/interview/{iid}": {
            "get": {
                "description": "Get information of an interview",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interview"
                ],
                "summary": "Get interview",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Interview ID",
                        "name": "iid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.InterviewApi"
                        }
                    }
                }
            }
        },
        "/organization/all": {
            "get": {
                "description": "Get brief information of all organizations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get all organizations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Brief"
                            }
                        }
                    }
                }
            }
        },
        "/organization/department/all/{oid}": {
            "get": {
                "description": "Get brief information of all departments in a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Department"
                ],
                "summary": "Get all departments in organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Brief"
                            }
                        }
                    }
                }
            }
        },
        "/organization/department/{oid}{did}": {
            "get": {
                "description": "Get information of a department in a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Department"
                ],
                "summary": "Get department in organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "did",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DepartmentApi"
                        }
                    }
                }
            }
        },
        "/organization/event/all/{oid}": {
            "get": {
                "description": "Get brief information of all events in a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get all events in organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Brief"
                            }
                        }
                    }
                }
            }
        },
        "/organization/event/{oid}{eid}": {
            "get": {
                "description": "Get information of an event in a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get event in organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EventApi"
                        }
                    }
                }
            }
        },
        "/organization/{oid}": {
            "get": {
                "description": "Get information of a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get information of organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OrganizationApi"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Brief": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.DepartmentApi": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "organizationID": {
                    "type": "integer"
                }
            }
        },
        "model.EventApi": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "organizationID": {
                    "type": "integer"
                },
                "otherInfo": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "status": {
                    "description": "0 disabled, 1 testing, 2 running",
                    "type": "integer"
                }
            }
        },
        "model.InterviewApi": {
            "type": "object",
            "properties": {
                "departmentID": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "maxInterviewee": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "otherInfo": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                }
            }
        },
        "model.OrganizationApi": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "rop-neo-staging.zjuqsc.com",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "Recruit Open Platform API",
	Description: "This API will be used under staging environment.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}

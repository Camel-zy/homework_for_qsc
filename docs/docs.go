// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/answer": {
            "put": {
                "description": "Create an answer",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Answer"
                ],
                "summary": "Create an answer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Form ID",
                        "name": "fid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ZJU ID",
                        "name": "zjuid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Answer information",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AnswerRequest_"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/avatar": {
            "get": {
                "description": "If everything is fine, the Data field will be a URL, from which you can get the avatar",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Avatar"
                ],
                "summary": "Get a URL from which you can get the avatar"
            },
            "post": {
                "description": "You will receive multiple fields in \"Data\" field if the request status is 200 OK\nOne of these fields is \"url\", you are supposed to send a request to this URL\nOther fields need to be set into the multipart/form-data of the request mentioned above\nMeanwhile, you are supposed to set \"Content-Type\" field according to the MIME type of the avatar\nFinally, set \"file\" field with the avatar you are going to upload",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Avatar"
                ],
                "summary": "Get the information of uploading avatar"
            }
        },
        "/event": {
            "get": {
                "description": "Get information of an event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EventResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Update an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Update event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Event Information",
                        "name": "data",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/model.EventRequest"
                        }
                    }
                ]
            }
        },
        "/event/department": {
            "get": {
                "description": "Get the number of round of a specific event according to departmentID and eventID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get round number of an event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "did",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Update the number of round according to  departmentID and eventID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Update round number of an event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "did",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "New Round Number",
                        "name": "newRoundNum",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/event/interview": {
            "get": {
                "description": "Get information of an interview in a specific event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interview"
                ],
                "summary": "Get interview in event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Interview ID",
                        "name": "iid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.InterviewResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Create an interview in a specific event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interview"
                ],
                "summary": "Create interview in event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "did",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Round",
                        "name": "rnd",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Interview Information",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.InterviewRequest"
                        }
                    }
                ]
            }
        },
        "/event/interview/all": {
            "get": {
                "description": "Get brief information of all interviews of the same round in a specific event and department",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interview"
                ],
                "summary": "Get all interviews of same round",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "did",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Round",
                        "name": "rnd",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Brief"
                            }
                        }
                    }
                }
            }
        },
        "/form": {
            "get": {
                "description": "Get a form",
                "tags": [
                    "Form"
                ],
                "summary": "Get a form",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Form ID",
                        "name": "fid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Form_"
                        }
                    }
                }
            },
            "put": {
                "description": "Create a form",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Form"
                ],
                "summary": "Create a form",
                "parameters": [
                    {
                        "description": "Form information",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.FormApi_"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "description": "Update a form",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Form"
                ],
                "summary": "Update a form",
                "parameters": [
                    {
                        "description": "Form information",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.FormApi_"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/interview": {
            "get": {
                "description": "Get information of an interview",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interview"
                ],
                "summary": "Get interview",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Interview ID",
                        "name": "iid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.InterviewResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Update an interview",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interview"
                ],
                "summary": "Update interview",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Interview ID",
                        "name": "iid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Interview Information",
                        "name": "data",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/model.InterviewRequest"
                        }
                    }
                ]
            }
        },
        "/interviewee/admit": {
            "post": {
                "tags": [
                    "Interviewee"
                ],
                "summary": "Admit an interviewee",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Interviewee ID",
                        "name": "vid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/interviewee/next": {
            "post": {
                "tags": [
                    "Interviewee"
                ],
                "summary": "Send an interviewee to next round",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Interviewee ID",
                        "name": "vid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/interviewee/options": {
            "post": {
                "description": "The frontend is required to send multiple iid in a JSON array,\nwhich are the optional interviews for an interviewee to choose from",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interviewee"
                ],
                "summary": "Update the interview option of a interviewee",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Interviewee ID",
                        "name": "vid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "The InterviewOption field is required, in JSON array",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IntervieweeRequest"
                        }
                    }
                ]
            }
        },
        "/interviewee/reject": {
            "post": {
                "tags": [
                    "Interviewee"
                ],
                "summary": "Reject an interviewee",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Interviewee ID",
                        "name": "vid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/message/cost": {
            "get": {
                "description": "get message cost and balance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "get message cost and balance",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MessageCostAPI"
                        }
                    }
                }
            }
        },
        "/organization": {
            "get": {
                "description": "Get information of a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get information of organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OrganizationApi"
                        }
                    }
                }
            }
        },
        "/organization/all": {
            "get": {
                "description": "Get brief information of all organizations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get all organizations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Brief"
                            }
                        }
                    }
                }
            }
        },
        "/organization/department": {
            "get": {
                "description": "Get information of a department in a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Department"
                ],
                "summary": "Get department in organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "did",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DepartmentApi"
                        }
                    }
                }
            }
        },
        "/organization/department/all": {
            "get": {
                "description": "Get brief information of all departments in a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Department"
                ],
                "summary": "Get all departments in organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Brief"
                            }
                        }
                    }
                }
            }
        },
        "/organization/event": {
            "get": {
                "description": "Get information of an event in a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get event in organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EventResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Create an event in a specific organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Create event in organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Event Information",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EventRequest"
                        }
                    }
                ]
            }
        },
        "/organization/event/all": {
            "get": {
                "description": "Get brief information of all events in a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get all events in organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "oid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Brief"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.AnswerRequest_": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "JSON"
                },
                "intention": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Intention"
                    }
                },
                "mobile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Brief": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.DepartmentApi": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "messageCost": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "organizationID": {
                    "type": "integer"
                }
            }
        },
        "model.EventRequest": {
            "type": "object",
            "required": [
                "EndTime",
                "Name",
                "StartTime"
            ],
            "properties": {
                "Description": {
                    "type": "string"
                },
                "EndTime": {
                    "description": "request string must be in RFC 3339 format",
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "OtherInfo": {
                    "type": "string"
                },
                "StartTime": {
                    "description": "request string must be in RFC 3339 format",
                    "type": "string"
                },
                "Status": {
                    "description": "1 disabled (default), 2 testing, 3 running",
                    "type": "integer"
                }
            }
        },
        "model.EventResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "organizationID": {
                    "type": "integer"
                },
                "otherInfo": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "status": {
                    "description": "1 disabled (default), 2 testing, 3 running",
                    "type": "integer"
                }
            }
        },
        "model.FormApi_": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "JSON"
                },
                "createTime": {
                    "type": "string"
                },
                "departmentID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "organizationID": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "model.Form_": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "JSON"
                },
                "createTime": {
                    "type": "string"
                },
                "departmentID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "organizationID": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "model.Intention": {
            "type": "object",
            "required": [
                "department_id"
            ],
            "properties": {
                "department_id": {
                    "type": "integer"
                },
                "intent_rank": {
                    "description": "this feature hasn't been implemented",
                    "type": "integer"
                }
            }
        },
        "model.InterviewRequest": {
            "type": "object",
            "required": [
                "EndTime",
                "Name",
                "StartTime"
            ],
            "properties": {
                "Description": {
                    "type": "string"
                },
                "EndTime": {
                    "description": "request string must be in RFC 3339 format",
                    "type": "string"
                },
                "Location": {
                    "type": "string"
                },
                "MaxInterviewee": {
                    "description": "default 6",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "OtherInfo": {
                    "type": "string"
                },
                "Round": {
                    "description": "一面为2，二面为3，以此类推",
                    "type": "integer"
                },
                "StartTime": {
                    "description": "request string must be in RFC 3339 format",
                    "type": "string"
                }
            }
        },
        "model.InterviewResponse": {
            "type": "object",
            "properties": {
                "departmentID": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "endTime": {
                    "type": "string"
                },
                "eventID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "maxInterviewee": {
                    "description": "default 6",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "otherInfo": {
                    "type": "string"
                },
                "round": {
                    "description": "一面为2，二面为3，以此类推",
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                }
            }
        },
        "model.IntervieweeRequest": {
            "type": "object",
            "properties": {
                "InterviewOptions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.MessageCostAPI": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "cost": {
                    "type": "number"
                }
            }
        },
        "model.OrganizationApi": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "messageCost": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "rop-neo-staging.zjuqsc.com",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "Recruit Open Platform API",
	Description: "This API will be used under staging environment.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}

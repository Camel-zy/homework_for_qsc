// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SMSClient is the client API for SMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SMSClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingReply, error)
	// rpc SetBalance(UsrReq)returns (UsrReply) {}
	// rpc GetBalance(UsrReq)returns (UsrReply) {}
	// rpc Charge(UsrReq)returns (UsrReply) {}
	// rpc Expense(UsrReq)returns (UsrReply) {}
	UserBalance(ctx context.Context, in *UsrReq, opts ...grpc.CallOption) (*UsrReply, error)
	GetSign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignReply, error)
	GetTpl(ctx context.Context, in *TplReq, opts ...grpc.CallOption) (*TplReply, error)
	RegisteTpl(ctx context.Context, in *TplReq, opts ...grpc.CallOption) (*TplReply, error)
	UpdateTpl(ctx context.Context, in *TplReq, opts ...grpc.CallOption) (*TplReply, error)
	SendMsgByTemplate(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgReply, error)
	SendMsgByText(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgReply, error)
}

type sMSClient struct {
	cc grpc.ClientConnInterface
}

func NewSMSClient(cc grpc.ClientConnInterface) SMSClient {
	return &sMSClient{cc}
}

func (c *sMSClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/SMS/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSClient) UserBalance(ctx context.Context, in *UsrReq, opts ...grpc.CallOption) (*UsrReply, error) {
	out := new(UsrReply)
	err := c.cc.Invoke(ctx, "/SMS/UserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSClient) GetSign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignReply, error) {
	out := new(SignReply)
	err := c.cc.Invoke(ctx, "/SMS/GetSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSClient) GetTpl(ctx context.Context, in *TplReq, opts ...grpc.CallOption) (*TplReply, error) {
	out := new(TplReply)
	err := c.cc.Invoke(ctx, "/SMS/GetTpl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSClient) RegisteTpl(ctx context.Context, in *TplReq, opts ...grpc.CallOption) (*TplReply, error) {
	out := new(TplReply)
	err := c.cc.Invoke(ctx, "/SMS/RegisteTpl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSClient) UpdateTpl(ctx context.Context, in *TplReq, opts ...grpc.CallOption) (*TplReply, error) {
	out := new(TplReply)
	err := c.cc.Invoke(ctx, "/SMS/UpdateTpl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSClient) SendMsgByTemplate(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, "/SMS/SendMsgByTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSClient) SendMsgByText(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, "/SMS/SendMsgByText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMSServer is the server API for SMS service.
// All implementations must embed UnimplementedSMSServer
// for forward compatibility
type SMSServer interface {
	Ping(context.Context, *PingReq) (*PingReply, error)
	// rpc SetBalance(UsrReq)returns (UsrReply) {}
	// rpc GetBalance(UsrReq)returns (UsrReply) {}
	// rpc Charge(UsrReq)returns (UsrReply) {}
	// rpc Expense(UsrReq)returns (UsrReply) {}
	UserBalance(context.Context, *UsrReq) (*UsrReply, error)
	GetSign(context.Context, *SignReq) (*SignReply, error)
	GetTpl(context.Context, *TplReq) (*TplReply, error)
	RegisteTpl(context.Context, *TplReq) (*TplReply, error)
	UpdateTpl(context.Context, *TplReq) (*TplReply, error)
	SendMsgByTemplate(context.Context, *MsgReq) (*MsgReply, error)
	SendMsgByText(context.Context, *MsgReq) (*MsgReply, error)
	mustEmbedUnimplementedSMSServer()
}

// UnimplementedSMSServer must be embedded to have forward compatible implementations.
type UnimplementedSMSServer struct {
}

func (UnimplementedSMSServer) Ping(context.Context, *PingReq) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSMSServer) UserBalance(context.Context, *UsrReq) (*UsrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBalance not implemented")
}
func (UnimplementedSMSServer) GetSign(context.Context, *SignReq) (*SignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSign not implemented")
}
func (UnimplementedSMSServer) GetTpl(context.Context, *TplReq) (*TplReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTpl not implemented")
}
func (UnimplementedSMSServer) RegisteTpl(context.Context, *TplReq) (*TplReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteTpl not implemented")
}
func (UnimplementedSMSServer) UpdateTpl(context.Context, *TplReq) (*TplReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTpl not implemented")
}
func (UnimplementedSMSServer) SendMsgByTemplate(context.Context, *MsgReq) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgByTemplate not implemented")
}
func (UnimplementedSMSServer) SendMsgByText(context.Context, *MsgReq) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgByText not implemented")
}
func (UnimplementedSMSServer) mustEmbedUnimplementedSMSServer() {}

// UnsafeSMSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SMSServer will
// result in compilation errors.
type UnsafeSMSServer interface {
	mustEmbedUnimplementedSMSServer()
}

func RegisterSMSServer(s grpc.ServiceRegistrar, srv SMSServer) {
	s.RegisterService(&SMS_ServiceDesc, srv)
}

func _SMS_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SMS/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMS_UserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServer).UserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SMS/UserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServer).UserBalance(ctx, req.(*UsrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMS_GetSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServer).GetSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SMS/GetSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServer).GetSign(ctx, req.(*SignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMS_GetTpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TplReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServer).GetTpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SMS/GetTpl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServer).GetTpl(ctx, req.(*TplReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMS_RegisteTpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TplReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServer).RegisteTpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SMS/RegisteTpl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServer).RegisteTpl(ctx, req.(*TplReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMS_UpdateTpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TplReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServer).UpdateTpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SMS/UpdateTpl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServer).UpdateTpl(ctx, req.(*TplReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMS_SendMsgByTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServer).SendMsgByTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SMS/SendMsgByTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServer).SendMsgByTemplate(ctx, req.(*MsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMS_SendMsgByText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServer).SendMsgByText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SMS/SendMsgByText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServer).SendMsgByText(ctx, req.(*MsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SMS_ServiceDesc is the grpc.ServiceDesc for SMS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SMS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SMS",
	HandlerType: (*SMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SMS_Ping_Handler,
		},
		{
			MethodName: "UserBalance",
			Handler:    _SMS_UserBalance_Handler,
		},
		{
			MethodName: "GetSign",
			Handler:    _SMS_GetSign_Handler,
		},
		{
			MethodName: "GetTpl",
			Handler:    _SMS_GetTpl_Handler,
		},
		{
			MethodName: "RegisteTpl",
			Handler:    _SMS_RegisteTpl_Handler,
		},
		{
			MethodName: "UpdateTpl",
			Handler:    _SMS_UpdateTpl_Handler,
		},
		{
			MethodName: "SendMsgByTemplate",
			Handler:    _SMS_SendMsgByTemplate_Handler,
		},
		{
			MethodName: "SendMsgByText",
			Handler:    _SMS_SendMsgByText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
